一。创建
	流程：
		1、创建接口对象

		2、设置混音器

		3、创建播放器（录音器）

		4、设置缓冲队列和回调函数

		5、设置播放状态

		6、启动回调函数

	重要接口解释
		1、类接口：SLObjectItf

		通过SLObjectItf接口类我们可以创建所需要的各种类型的类接口，比如：
		创建引擎接口对象：SLObjectItf engineObject
		创建混音器接口对象：SLObjectItf outputMixObject
		创建播放器接口对象：SLObjectItf playerObject
		2、具体的接口类

		引擎：SLEngineItf
		播放器：SLPlayItf
		声音控制器：SLVolumeItf等等

	创建三部曲

		如：创建引擎接口对象（ createrealizeget ）

		SLObjectItf engineObject = NULL;//用SLObjectItf声明引擎接口对象  
		SLEngineItf engineEngine = NULL;//声明具体的引擎对象实例  
		void createEngine()  
		{  
			SLresult result;//返回结果  
			//第一步：创建引擎 
			result = slCreateEngine(&engineObject, 0, NULL, 0, NULL, NULL);

			//第二步：实现（Realize）engineObject接口对象
			result = (*engineObject)->Realize(engineObject, SL_BOOLEAN_FALSE); 

			//第三部：通过engineObject的GetInterface方法初始化engineEngine 
			result = (*engineObject)->GetInterface(engineObject, SL_IID_ENGINE, &engineEngine);
		} 

	销毁

		(*engineObject)->Destroy(engineObject);

一.重采样
	基本概念：
		采样率：每秒对音频数据采样的个数（44100hz）
		采样位数：存储采样数据的位数(16bit 2字节)
		输出声道：单声道、立体声（左右声道）等

		重采样：

		就是把目标音频按照一定的格式重新采样编码成新的音频数据，
		方便统一处理，一般的采样标准是：44100HZ、16bit、双声道
		
		
	采样对象：解码出来的音频帧（AVframe）
	使用函数：SwrContext
	swr_ctx = swr_alloc_set_opts(
		struct SwrContext *s, // 传NULL
		int64_t out_ch_layout, // 输出声道布局
		enum AVSampleFormat out_sample_fmt, //输出采样位数格式
		int out_sample_rate, //输出采样率
		int64_t  in_ch_layout,  // 输入声道布局
		enum AVSampleFormat  in_sample_fmt, //输入采样位数格式
		int  in_sample_rate, //输入采样率
		int log_offset, // NULL
		void *log_ctx); // NULL
		
		
		
	Int nb = swr_convert(swr_ctx, 
	&out_buffer, //转码后输出的PCM数据大小
	frame->nb_samples, //输出采样个数
	(const uint8_t **) frame->data, //原始压缩数据
	frame->nb_samples); //输入采样个数

	计算PCM数据大小：
	size = 采样个数 * 声道数 * 单个采样点大小
	如：44100HZ、16bit、立体声（2个声道）
	size = 44100 * 2 * (16/8)



	
	

		


