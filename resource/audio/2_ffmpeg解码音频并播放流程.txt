FFmpeg在C++子线程中解码音频数据，得到数据包AVPacket
AVPacket：存放原始音频/视频的压缩包


一.  音视频解码流程

    流程如下：

        1、注册解码器并初始化网络
            av_register_all();
            avformat_network_init();
        2、打开文件或网络流
            AVFormatContext *pFormatCtx = avformat_alloc_context();
            avformat_open_input(&pFormatCtx, url, NULL, NULL)
        3、获取流信息
            avformat_find_stream_info(pFormatCtx, NULL)
        4、获取音频流
            pFormatCtx->streams[i]->codecpar->codec_type == AVMEDIA_TYPE_AUDIO
        5、获取解码器
            AVCodec *dec = avcodec_find_decoder(audio->codecpar->codec_id);
        6、利用解码器创建解码器上下文
            AVCodecContext *avCodecContext = avcodec_alloc_context3(dec);
            avcodec_parameters_to_context(audio->avCodecContext, audio->codecpar)
        7、打开解码器
            avcodec_open2(audio->avCodecContext, dec, 0)
        8、读取音频帧
            AVPacket *packet = av_packet_alloc();
            av_read_frame(pFormatCtx, packet);

二.  FFmpeg对音频数据重采样生成PCM数据:

        基本概念：

        采样率：每秒对音频数据采样的个数（44100hz）
        采样位数：存储采样数据的位数(16bit 2字节)
        输出声道：单声道、立体声（左右声道）等

        重采样：

        就是把目标音频按照一定的格式重新采样编码成新的音频数据，
        方便统一处理，一般的采样标准是：44100HZ、16bit、双声道


三.  重采样：

        采样对象：解码出来的音频帧（AVframe）

        使用函数：SwrContext
        swr_ctx = swr_alloc_set_opts(
            struct SwrContext *s, // 传NULL
            int64_t out_ch_layout, // 输出声道布局
            enum AVSampleFormat out_sample_fmt, //输出采样位数格式
            int out_sample_rate, //输出采样率
            int64_t  in_ch_layout,  // 输入声道布局
            enum AVSampleFormat  in_sample_fmt, //输入采样位数格式
            int  in_sample_rate, //输入采样率
            int log_offset, // NULL
            void *log_ctx); // NULL


        Int nb = swr_convert(swr_ctx,
            &out_buffer, //转码后输出的PCM数据大小
            frame->nb_samples, //输出采样个数
            (const uint8_t **) frame->data, //原始压缩数据
            frame->nb_samples); //输入采样个数

        计算PCM数据大小：
        size = 采样个数 * 声道数 * 单个采样点大小
        如：44100HZ、16bit、立体声（2个声道）
        size = 44100 * 2 * (16/8)


四.  FFmpeg + OPenSL ES 实现音频播放：

        在OPenSL ES的回调函数中获取音频的PCM数据和大小，并播放。

        int buffersize = wlAudio->resampleAudio();
        if(buffersize > 0)
        {
              (* wlAudio-> pcmBufferQueue)->Enqueue(
            wlAudio-> pcmBufferQueue,
            (char *) wlAudio-> buffer,
            buffersize);
        }

五.  添加加载、暂停、播放功能

    加载：判断队列里面是否有数据，没有的话就是加载状态，否则是播放状态。
    主要是C++调用Java方法。(主要在音频重采样阶段)

    暂停：
    (*pcmPlayerPlay)->SetPlayState(pcmPlayerPlay,  SL_PLAYSTATE_PAUSED);

    播放：
    (*pcmPlayerPlay)->SetPlayState(pcmPlayerPlay,  SL_PLAYSTATE_PLAYING);

六.  播放时间计算

    *总时长：
    	duration = pFormatCtx->duration / AV_TIME_BASE;  // 单位是多少个 time_base

    *当前AVframe时间：
    	AVRational time_base = pFormatCtx->streams[i]->time_base
    	now_time = frame->pts * av_q2d(time_base); // 当前时间是多少个 time_base
    	注意：时间必须是递增的，否则会出现异常

    *当前播放时间：
    	公式：PCM实际数据大小 / 每秒理论PCM大小；
    	clock += buffersize / ((double)(sample_rate * 2 * 2));
		
七.	停止播放释放内存

	1、释放所分配的内存
		释放顺序：释放队列->释放OpenSL->释放Audio->释放FFmpeg。

	2、处理异常情况
		比如：数据流还在加载中，就停止播放。

八.  出错回调
    出错回调：
    	void onError(int code, String msg);

    在出错回调里面回收资源，并添加变量避免重复调用stop方法。

九.  Seek功能和完成播放回调
    Seek：
    pthread_mutex_lock(&seek_mutex);
    int64_t rel = secs * AV_TIME_BASE;
    avformat_seek_file(pFormatCtx, -1, INT64_MIN, rel, INT64_MAX, 0);
    pthread_mutex_unlock(&seek_mutex);

    pthread_mutex_lock(&seek_mutex);
    ret = av_read_frame(pFormatCtx, packet);
    pthread_mutex_unlock(&seek_mutex);

    完成播放：
             在最后调用完成接口即可。

十.  播放切换功能
    原理：
    在调用stop方法后回调一个函数，然后在函数里面判断是否播放下一个URL。


############################## 音频高级部分 #############################

一.  音量控制
    音量控制主要用到了OpenSL ES中的音量控制接口 SLVolumeItf 。

    初始化：
    (*pcmPlayerObject)->GetInterface( pcmPlayerObject,
                                                  SL_IID_VOLUME,
                                                  &pcmPlayerVolume);

    设置音量：
    (*pcmPlayerVolume)->SetVolumeLevel(
                    pcmPlayerVolume,
                    (100 - percent) * -50);
二.  声道切换
    声道切换主要用到了OpenSL ES中的声道控制接口 SLMuteSoloItf 。

    初始化：
    (*pcmPlayerObject)->GetInterface(
    				pcmPlayerObject,
    				SL_IID_MUTESOLO,
    				&pcmPlayPlayerMuteSolo);
    设置声道：
    (*pcmPlayPlayerMuteSolo)->SetChannelMute(
    				pcmPlayPlayerMuteSolo,
    				1,  //0右声道1左声道
    				false //声道是否开启
    				);
    立体声：左声道右声道都关闭

三.  变调变速(soundTouch实现)
    1.  移植soundTouch
        1、到官网下载最新源码（2.0） http://www.surina.net/soundtouch/
            source codes  download 2.0.zip

        2、提取出include头文件和SoundTouch源码
            \soundtouch-2.0.0\include
            \soundtouch-2.0.0\source\SoundTouch

        3、在Android Studio中集成SoundTouch源码
    2.  使用SoundTouch
        1、声明SoundTouch对象和内存变量：
        	SoundTouch *soundTouch = NULL;
        	SAMPLETYPE *sampleBuffer = NULL;

        2、初始化对象和内存：
        	soundTouch = new SoundTouch();
        	sampleBuffer =(malloc(samplerate * 2 * 2 * 2 / 3));

        3、设置音频数据参数：
        	soundTouch->setSampleRate(samplerate);
           	soundTouch->setChannels(2);

        4、把PCM数据给SoundTouch处理：
        	soundTouch->putSamples(sampleBuffer, nb);

        5、循环得到处理后的PCM数据：
        num = soundTouch->receiveSamples(sampleBuffer, data_size / 4);

        6、设置变速和变调：
        	soundTouch->setPitch(1.0); //变调
        	soundTouch->setTempo(1.5);//变速

    注意：8bitPCM转16bitPCM

            因为FFmpeg解码出来的PCM数据是8bit （uint8）的，而SoundTouch中最低
            是16bit（ 16bit integer samples ），所以我们需要将8bit的数据转换成16bit
            后再给SoundTouch处理。
            处理方式：
            由于PCM数据在内存中是顺序排列的，所以我们先将第一个8bit的数据复制
            到16bit内存的前8位，然后后8bit的数据再复制给16bit内存的后8bit，就能把
            16bit的内存填满，然后循环复制，直到把8bit的内存全部复制到16bit的内存
            中，计算公式如下：

            for(int i = 0; i < data_size / 2 + 1; i++)
            {
                sampleBuffer[i] = (buffer[i * 2] | ((buffer[i * 2 + 1]) << 8));
            }














	